1.
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

class Shapes {
public:
    virtual void perimeter() = 0;
    virtual void area() = 0;
};

class Rectangle : public Shapes {
public:
    double length, breadth;

    Rectangle(double l, double b) : length(l), breadth(b) {}

    void perimeter() override {
        cout << "Rectangle:" << endl;
        cout << "Perimeter:" << 2 * (length + breadth) << endl;
    }

    void area() override {
        cout << "Area:"  << length * breadth << endl;
    }
};

class Square : public Shapes {
public:
    double side;

    Square(double s) : side(s) {}

    void perimeter() override {
        cout << "Square:" << endl;
        cout << "Perimeter:" << 4 * side << endl;
    }

    void area() override {
        cout << "Area:" << side * side << endl;
    }
};

class Triangle : public Shapes {
public:
    double side1, side2, side3;

    Triangle(double a, double b, double c) : side1(a), side2(b), side3(c) {}

    void perimeter() override {
        cout << "Triangle:" << endl;
        cout << "Perimeter:"<< side1 + side2 + side3 << endl;
    }

    void area() override {
        double s = (side1 + side2 + side3) / 2.0;
        double area = sqrt(s * (s - side1) * (s - side2) * (s - side3));
        cout << "Area:" << fixed << setprecision(2) << area << endl;
    }
};

class Circle : public Shapes {
public:
    double radius;

    Circle(double r) : radius(r) {}

    void perimeter() override {
        cout << "Circle:" << endl;
        cout << "Perimeter:" << fixed << setprecision(2) << 2 * M_PI * radius << endl;
    }

    void area() override {
        cout << "Area:" << fixed << setprecision(2) << M_PI * radius * radius << endl;
    }
};

int main() {
    double length, breadth, side, side1, side2, side3, radius;

    cin >> length >> breadth;
    cin >> side;
    cin >> side1 >> side2 >> side3;
    cin >> radius;

    Rectangle rect(length, breadth);
    Square sq(side);
    Triangle tri(side1, side2, side3);
    Circle circ(radius);

    rect.perimeter();
    rect.area();
    cout << endl;

    sq.perimeter();
    sq.area();
    cout << endl;

    tri.perimeter();
    tri.area();
    cout << endl;

    circ.perimeter();
    circ.area();

    return 0;
}

2.

#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

class Account {
public:
    virtual void display() = 0;
    virtual void deposit(double amount) = 0;
    virtual void withdrawal(double amount) = 0;
};

class SavingsAccount : public Account {
private:
    int accno;
    string name;
    double balance;

public:
    SavingsAccount(int acc, string n, double bal) : accno(acc), name(n), balance(bal) {}

    void display() override {
        cout << accno << " " << name << " " << fixed << setprecision(2) << balance << endl;
    }

    void deposit(double amount) override {
        balance += amount;
    }

    void withdrawal(double amount) override {
        if (balance >= amount) {
            balance -= amount;
        } else {
            cout << "Insufficient Balance" << endl;
        }
    }

    double getBalance() { return balance; }
};

class CurrentAccount : public Account {
private:
    int accno;
    string name;
    double balance;
    int draftlimit;
    string city;

public:
    CurrentAccount(int acc, string n, double bal, int draft, string c)
        : accno(acc), name(n), balance(bal), draftlimit(draft), city(c) {}

    void display() override {
        cout << accno << " " << name << " " << fixed << setprecision(2) << balance;
        cout << " "<< draftlimit << " " << city << endl;
    }

    void deposit(double amount) override {
        balance += amount;
    }

    void withdrawal(double amount) override {
        if (balance + draftlimit >= amount) {
            balance -= amount;
        } else {
            cout << "Withdrawal exceeds draft limit" << endl;
        }
    }

    double getBalance() { return balance; }
};

int main() {
    int choice;
    cin >> choice;

    if (choice == 1) {
        int accno;
        string name;
        double balance;
        cin >> accno >> name >> balance;
        SavingsAccount sa(accno, name, balance);

        int action;
        cin >> action;

        if (action == 1) {
            double amount;
            cin >> amount;
            sa.display();
            sa.deposit(amount);
            cout << "Balance after deposit:" << fixed << setprecision(2) << sa.getBalance() << endl;
            sa.display();
        } else if (action == 2) {
            double amount;
            cin >> amount;
            sa.display();
            sa.withdrawal(amount);
            cout << "Balance after withdrawl:" << fixed << setprecision(2) << sa.getBalance() << endl;
            sa.display();
        }
    } else if (choice == 2) {
        int accno;
        string name, city;
        double balance, draftlimit;
        cin >> accno >> name >> balance >> draftlimit >> city;
        CurrentAccount ca(accno, name, balance, draftlimit, city);

        int action;
        cin >> action;

        if (action == 1) {
            double amount;
            cin >> amount;
            ca.display();
            ca.deposit(amount);
            cout << "Balance after deposit:" << fixed << setprecision(2) << ca.getBalance() << endl;
            ca.display();
        } else if (action == 2) {
            double amount;
            cin >> amount;
            ca.display();
            ca.withdrawal(amount);
            cout << "Balance after withdrawl:" << fixed << setprecision(2) << ca.getBalance() << endl;
            ca.display();
        }
    }

    return 0;
}

