1.

#include <iostream>
#include <string>
#include <unordered_map>
using namespace std;

string checkSloganCondition(string slogan) {
    unordered_map<char, int> charCount;

    // Count occurrences of each character
    for (char c : slogan) {
        charCount[c]++;
    }

    // Iterate through each character and its count
    for (auto &entry : charCount) {
        char character = entry.first;
        int count = entry.second;

        // Calculate the sum of occurrences of other characters
        int otherSum = 0;
        for (auto &e : charCount) {
            if (e.first != character) {
                otherSum += e.second;
            }
        }

        // Check if the count of the character equals the sum of other characters
        if (count == otherSum) {
            return slogan + ":Yes";
        }
    }

    // If no character satisfies the condition, return "No"
    return slogan + ":No";
}

int main() {
    string slogan;

    // Input the slogan
    cin >> slogan;

    // Output the result
    cout << checkSloganCondition(slogan) << endl;

    return 0;
}

2.

#include <iostream>
#include <string>
#include <cctype>
#include <unordered_set>
using namespace std;

// Function to check if the string is a keyword
bool isKeyword(const string& word) {
    unordered_set<string> keywords = {
        "auto", "break", "case", "char", "const", "continue", "default", "do", "double",
        "else", "enum", "extern", "float", "for", "goto", "if", "int", "long", "register",
        "return", "short", "signed", "sizeof", "static", "struct", "switch", "typedef",
        "union", "unsigned", "void", "volatile", "while", "bool", "inline", "nullptr"
    };

    return keywords.find(word) != keywords.end();
}

// Function to check if the variable name is valid
bool isValidVariable(const string& variable) {
    // Rule 1: Must begin with a letter or underscore
    if (variable.empty() || (!isalpha(variable[0]) && variable[0] != '_')) {
        return false;
    }

    // Rule 4: Cannot be longer than 31 characters
    if (variable.length() > 31) {
        return false;
    }

    // Rule 2 and 3: Only letters, digits, and underscores are allowed
    for (char c : variable) {
        if (!isalnum(c) && c != '_') {
            return false;
        }
    }

    // Rule 5: Cannot be a keyword
    if (isKeyword(variable)) {
        return false;
    }

    // If all rules are satisfied, the variable name is valid
    return true;
}

int main() {
    string variable;

    // Input the variable name
    cin >> variable;

    // Check validity and output the result
    if (isValidVariable(variable)) {
        cout << variable << " is valid" << endl;
    } else {
        cout << variable << " is invalid" << endl;
    }

    return 0;
}

